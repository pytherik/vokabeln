#!/usr/bin/env python3
from datetime import datetime
from eb_utils.helpers import Colors, clear
import re, os
from os import system 
from random import randint
import sys
import csv


col = Colors()
ja =   ["j", "y", "ja", "yes"]

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
path_csv = BASE_DIR + '/VOC_NEU/voxnscore.csv'
path_data = BASE_DIR + '/VOC_NEU/stats.csv'

class Vokabeln:
    """ Vokabeltrainer """

    gesamt_heute  = 0
    richtig_heute = 0
    falsch_heute  = 0
    hinzugefügt   = 0
    st = "*" * 45
    title = f"{st}\n*{col.BR}{'VOKABELHEFT'.center(43)}{col.E}*\n{st}"
    fremd   = []      # Vok. Fremdsprache  (path_csv)
    deutsch = []      # Vok. Deutsch       (path_csv)
    meta    = []      # link zu Statistik  (path_csv)  (Erstelldatum)
    score   = []      # Scoring            (path_csv)
    found   = []      # Suchindizes
    stats   = []      # Statistikdaten     (path_data)

    def __init__(self):#, path):
        """ Textdatei einlesen und aufteilen """
        
        with open(path_data, "r") as data:
            reader = csv.reader(data)
            for line in reader:
                self.stats.append(line)
        
        with open(path_csv, "r") as vok:
            reader = csv.reader(vok)
            for line in reader:
                line = line[:-3]+[int(score) for score in line[-3:]]
                self.fremd.append(line[0])
                self.deutsch.append(line[1:-4])
                self.meta.append(line[-4])
                self.score.append(line[-3:])
        
    def statistik(self):
        """ macht Statistik """
        
        YYYY, MM, DD, hh, mm =re.split("\W",str(datetime.today()))[:-2]
        if len(hh) == 1:
            hh = "0" + hh
        if len(mm) == 1:
            mm = "0" + hh
        anz_vok = len(self.fremd)
        gesamt  = 0
        richtig = 0
        falsch  = 0
        for index in range(len(self.fremd)):
            gesamt  += self.score[index][0]
            richtig += self.score[index][1]
            falsch  += self.score[index][2]
        return (anz_vok, gesamt, richtig, falsch, YYYY, MM, DD, hh, mm)
    
    def menu(self):
        """ Startseite, Auswahlmenu """
        
        clear()
        self.check_date()
        print(self.title)
        data = self.statistik()
        
        print(f"\n{data[6]}.{data[5]}.{data[4]}    Sammlung gesamt:{str(data[0]).rjust(5)}", end = "")           
        print(f"    {data[7]}:{data[8]}")
        if not  self.hinzugefügt:
            print("\n\n")
        else:
            print(f"Hinzugefügt    :{str(self.hinzugefügt).rjust(5)}\n") 
        print(f"{'_'*45}\nAbfragen gesamt:{str(data[1]).rjust(5)}   heute:{str( self.gesamt_heute).rjust(3)}\n")
        print(f"richtig  gesamt:{str(data[2]).rjust(5)}   heute:{str( self.richtig_heute).rjust(3)}")
        print(f"falsch   gesamt:{str(data[3]).rjust(5)}   heute:{str( self.falsch_heute).rjust(3)}\n{'_'*45}")
        
        print("\n1 Abfragen\n2 Nachschlagen\n3 Neue Vokabel\n4 Bearbeiten\n5 BEENDEN\n\n›› ", end = "")

        wahl = 0
        while wahl not in (1, 2, 3, 4, 5, 42) or wahl == "":
            try:
                wahl = int(input())
            except ValueError:
                print(">1 - 5<\n›› ")
        if   wahl == 1: self.lernen()
        elif wahl == 2: self.suchen()
        elif wahl == 3: self.anlegen()
        elif wahl == 4: self.aendern2()
        elif wahl ==42: self.score_löschen()
        else:
            self.ende()
        
    def find(self, vok):
        """ Indizes gefundener Einträge in Liste ausgeben """
        found = []
        for index in range(len(self.fremd)):
            if vok in self.fremd[index]:
                found.append(index)

        for index in range(len(self.deutsch)):
            for wort in range(len(self.deutsch[index])):
                if vok in self.deutsch[index][wort]:
                    if index in found:
                        continue
                    found.append(index)
        return found

    def trans(self,vok, hamwa=False):
        """ gibt alle Übersetzungen aus """
       
        found = self.find(vok)
        if not found:
            print("Nicht vorhanden")
            return False
        for index in found:
            if len(found[found.index(index):]) > 3:
                i = (len(found)+1) - len(found[found.index(index):]) 
                if not i % 4:
                    weiter = input("<enter>")
                    clear()
                    print(f"{self.title}\n\n\n\n")
            self.anzeigen(self.fremd[index], self.deutsch[index])

    def anzeigen(self, fremd, deutsch):
        """ Vokabel anzeigen """ 
       
        print(f"{chr(717)*45}\nEnglisch  : {fremd}\n")
        i = 0
        for wort in deutsch:
            print(f"Deutsch {i+1} : {wort}")
            i += 1
        print(f"{chr(713)*45}\n")
                
    def lernen(self):
        """ Vokabeln abfragen """
        
        clear()
        self.check_date()
        print(self.title)
        
        self.gesamt_heute += 1
        ran = randint(0, len(self.fremd)-1)
        print(f"\n\n{chr(717) * 45}")
        print(f"Was heißt '{self.fremd[ran]}' auf deutsch ?".center(45))
        print(chr(713) * 45)
        if self.score[ran][0] != 0:
            print(f"Schon {self.score[ran][1]} mal richtig und {self.score[ran][2]}mal falsch!")

        antwort = input("\n ›› ")
        self.score[ran][0] += 1
        if antwort in self.deutsch[ran]:
            print("\nRichtig !\n")
            self.anzeigen(self.fremd[ran], self.deutsch[ran])        
            self.richtig_heute +=1
            self.score[ran][1] += 1
        else:
            print("\nNicht ganz :")
            self.anzeigen(self.fremd[ran], self.deutsch[ran])
            if antwort:
                print("\nSiehst du ein, dass du falsch lagst  <1> ")
                print(f"oder soll deine Lösung mit ins Heft  <2> ?\n", end = " ›› ")
                nr = input()
                if not nr or nr == "1":
                    clear()
                    self.falsch_heute += 1
                    self.score[ran][2] += 1
                    print(self.title)
                    print(f"\n\n\nAlles klar !   {col.R}F A L S C H !{col.E}\n\n")
                elif nr == "2":
                    self.bearbeiten(ran, antwort)
            else:
                self.falsch_heute +=1
                self.score[ran][2] += 1
        
        if input ("\nWeiterlernen (j/n) ? ›› ") in ja :
            self.lernen()
        else:
            self.menu()

    def suchen(self):
        """ Übersetzung suchen und anzeigen, alternativ: Speicheroption"""
        
        clear()
        self.check_date()
        data = self.statistik()
        
        print(self.title)
        print(f"\n\n{chr(717) * 45}")
        
        vok = input(f"{'Wonach suchst du'.center(45)}\n{chr(713) * 45}\n ›› ")
        if not vok:
            self.menu()
        if len(vok) < 3:
            weiter = input("      ... mindestens drei Buchstaben <enter>")
            self.suchen()
        found = self.find(vok)
        if found:
            print()
            for index in found:
                i = ((len(found)+1) - len(found[found.index(index):]))
                if i > 3:
                    if not i % 4:
                        print("<enter>", end = "")
                        weiter = input()
                        clear()
                        print(f"{self.title}\n\n\n\n")
                        
                if int(self.meta[index]) > len(self.stats)-1 or self.stats[int(self.meta[index])][6] == data[6]:
                    print("geändert heute.")
                elif self.meta[index] == "0" or self.meta[index] == 0:
                    print("geändert vor dem 10.05.2020")
                else:
                    vom = self.stats[int(self.meta[index])]
                    print(f"Eintrag vom {vom[-3]}.{vom[-4]}.{vom[-5]}")
                self.anzeigen(self.fremd[index], self.deutsch[index])
        elif not found:
            print("\n... ist noch nicht dabei !")
            print(f"\n'{vok}' anlegen (j/n) ?", end = " ›› ")
            if input () in ja:
                self.aendern2(vok)
        
        if input("\nWeitersuchen (j/n) ? ›› ") in ja: self.suchen()
        
        else:
            self.menu()
            
    def anlegen(self, vok=False, i=1):
        """ neue Vokabeln hinzufügen """
        
        clear()
        self.check_date()
        print(self.title)
        
        deutsch = []
        if i == 2:
            deutsch.append(vok)
            vok = False
        
        print(f"\nS P A M !  Wort Nr.{len(self.fremd)+1}\n\n")
        print(f"Du  fügst  heute das { self.hinzugefügt + 1}. Wort hinzu!\n{'_'* 45}")
        if vok :
            print(f"\nDas neue Wort (en) : ›› {vok}")
            if not input ("   richtig   (j_n) ? ›› ") in ja:
                self.anlegen()
            
        while not vok:
            vok = input("\n\nDas neue Wort (en) : ›› ")
            if not vok:
                self.menu()
            elif self.find(vok):
                print("\nHamwa schon:")
                self.trans(vok, hamwa = True)
                if not input ("\n\nTrotzdem weiter (j/n) ? ›› ") in ja:
                    self.menu()
                else:
                    self.anlegen(vok)
            if not input ("   richtig   (j_n) ? ›› ") in ja:
                vok = False
        fremd = vok
        save = False
        if i == 2:
            print("Bedeutung 1        :", end = " ›› ")
            print(deutsch[0])
        while not save:
            bedeutung = input(f"Bedeutung {i}        : ›› ")               
            if not bedeutung and not deutsch:
                self.menu()                   # nichts geändert
            elif not bedeutung:
                save = True
                self.behalten(fremd, deutsch) # wird aufgenommen
            else:
                deutsch.append(bedeutung)
            i += 1    
        if input ("\nweitere Vokabeln (j/n) ? ›› ") in ja:
            self.anlegen()
        else:
            self.menu()

    def behalten(self, fremd, deutsch):
        """ Vokabeln aktualisieren """
        
        heute = len(self.stats)
        clear()

        print(self.title)
        print("\n\n" + chr(717) * 45)
        print("Möchtest du den Eintrag so übernehmen ?".center(45))
        print(chr(713) * 45)
        print()   
        self.anzeigen(fremd, deutsch)
        self.fremd.append(fremd)
        self.deutsch.append(deutsch)
        self.meta.append(heute)
        self.score.append([0, 0, 0])
        print("\nAlles O.K. (j/n) ?", end = " ›› ")
        if not input () in ja:
            self.aendern(index=len(self.fremd)-1, neue_vok=True)
        self.hinzugefügt += 1
        self.ende(neu=True)
            
    def bearbeiten(self, ran=False, dazu=False, neue_vok=False):
        """ Eintrag ändern (erweitern, löschen) """
        clear()

        print(self.title)
        
        if ran and dazu:
            self.deutsch[ran].append(dazu)
            self.anzeigen(self.fremd[ran], self.deutsch[ran])
            print("\nGefällt's dir so (j/n)?", end = " ›› ")
            janein = input () in ja
            if not janein and neue_vok:         # bei Unzufriedenheit
                self.aendern(ran, neue_vok)     # zu den Änderungsoptionen 
            elif not janein and not neue_vok:
                self.deutsch[ran].pop()
                self.bearbeiten(ran)
            elif neue_vok:
                self.meta[ran] = len(self.stats)
                self.menu()
            else:
                self.score[ran][1] += 1
                self.richtig_heute += 1
                print(f"\n\n{self.st}\n{'Dafür gibts einen Schlumpf ins Heft :-)'.center(45)}\n{self.st}")
                print("\n<enter>", end = "")
                weiter = input()
                self.menu()
        elif ran:
            
            vok = input("\nWie denn jetzt ? ›› ")
            if not vok:
                print("\nOkay. Dann bleibt's dabei!\n")
                self.anzeigen(self.fremd[ran], self.deutsch[ran])
                print("\nWeiter mit <enter>", end = "")
                weiter = input()
                self.score[ran][2] += 1
                self.falsch_heute += 1
                return
            else:
                self.bearbeiten(ran, vok)
    def aendern2(self, vok=False):
        """ ändern oder anlegen ? """
        clear()
        print(self.title)
        
        if not vok:                                 # neue Suche im Heft
            print("\n\n" + chr(717) * 45)
            print("Gib das Wort ein, das du ändern möchtest.".center(45))
            print(chr(713) * 45)
            print("\n", end = " ›› ")
            vok = input()
            if not vok:
                self.menu()
            found = self.find(vok)
            if not found:                           # nicht drin, kann angelegt werden
                print(f"\n'{vok}' ist noch nicht im Heft !")
                print("\nDu kannst es jetzt hinzufügen (j/n).",end = " ›› ")
                if  not input () in ja:
                    self.menu()                     # soll nicht rein 
                else:
                    self.aendern2(vok)              # soll rein
            if len(found) > 1:
                if found:
                    print()
                    for index in found:
                        i = ((len(found)+1) - len(found[found.index(index):]))
                        if i > 3:
                            if not i % 4:           # 4 Vok pro Seite anz.
                                print("<enter>", end = "")
                                weiter = input()
                                clear()
                                print(self.title)
                                print("\n\n\n")
                                                    # Änderugsdatum abfragen
                        if int(self.meta[index]) > len(self.stats)-1:
                            print(f"<{found.index(index)+1}>  ", end = "")
                            print("geändert heute.")
                        elif self.meta[index] == "0" or self.meta[index] == 0:
                            print(f"<{found.index(index)+1}>  ", end = "")
                            print("geändert vor dem 10.05.2020")
                        else:
                            vom = self.stats[int(self.meta[index])]
                            print(f"<{found.index(index)+1}>  ", end = "")
                            print(f"Eintrag vom {vom[-3]}.{vom[-4]}.{vom[-5]}")
                        self.anzeigen(self.fremd[index], self.deutsch[index])                        
                print("\nWelchen Eintrag möchtest du ändern ?\n")
                print(f"<1> - <{len(found)}>", end = "")
                nr = 0
                while nr < 1 or nr > len(found):
                    try:
                        nr = int(input())           # Auswahl aus Anz. gefundener
                    except ValueError:
                        print(f"<1> - <{len(found)}>", end = "")
                        nr = 0
                self.aendern(index = found[nr - 1])
            else:
                self.aendern(index = found[0])       
                                                     # Anlegen nach gescheiterter Suche
        print(f"\n\n\nIst {vok} das englische Wort ?", end = " ›› ")
        if input () in ja:
            self.anlegen(vok)                        # Anlegen normal
        else:
            self.anlegen(vok, 2)                     # Anlegen als Bedeutung 1
        
    def aendern(self, index, neue_vok=False):        # ändert Eintrag[index] oder
        clear()                              # new_vok = neu anzulegenden Eintr.
        
        self.check_date()
        
        print(self.title)
        print("\n\n")
        self.anzeigen(self.fremd[index], self.deutsch[index])
        print("\nmöchtest du: \n\n<1> den Eintrag löschen")
        print("<2> Bedeutung hinzfügen")
        print("<3> Bedeutung ändern/ löschen")
        print("\n›› ", end = "")     
        nr = input()
        if not nr or nr not in ["1", "2", "3"]:
            if neue_vok:
                 self.hinzugefügt += 1
            self.menu()
        elif nr == "1":
            print("\nSicher (j/n) ? ", end = " ›› ")
            if not input () in ja:
                self.aendern(index)
            del self.deutsch[index]
            del self.fremd[index]
            del self.meta[index]
            del self.score[index]
            print("\nDer Eintrag ist gelöscht !\n\nweiter mit <enter>", end = "")
            weiter = input()
            self.menu()
        elif nr == "2":
            clear()

            print(self.title)
            self.anzeigen(self.fremd[index], self.deutsch[index])
            print(f"\nBedeutung {len(self.deutsch[index])+1}        :", end = " ›› ")
            bedeutung = input()
            if bedeutung:
                self.bearbeiten(index, bedeutung, neue_vok=True)
            else:
                self.aendern(index, neue_vok=True)
        elif nr == "3":
            clear()
            
            i = 1
            x = []
            print(self.title)
            print("\n\n" + chr(717) * 45)
            for bedeutung in self.deutsch[index]:
                print(f"Bedeutung <{i}> : {self.deutsch[index][i-1]}")
                x.append(str(i))
                i += 1
            print(chr(713) * 45)
            print(f"\nWelche Bedeutung <1> - <{i}> ?", end = " ›› ")
            nr = input()
            
            if nr not in x:
                self.aendern(index, neue_vok=True)
            else:
                weg = self.deutsch[index][int(nr)-1]
                print(f"\n   Soso, {weg} ist also falsch ... ")
                print("\nRichtig wäre dann :")
                print("Löschen mit <enter>     ", end = " ›› ")
                behalten = input()
                if not behalten:
                    self.deutsch[index].remove(weg)
                else:
                    self.deutsch[index][int(nr)-1]= behalten
                self.anzeigen(self.fremd[index], self.deutsch[index])
                print("\nOkay so ?", end = " ›› ")
                if input () in ja:
                    self.menu()
                if not input () in ja and not behalten:
                    self.deutsch[index].insert(int(nr) - 1, weg)
                    self.aendern(index, neue_vok=True)
                elif not input () in ja:
                    self.deutsch[index][int(nr)-1] = weg
                    self.aendern(index, neue_vok=True)
                if neue_vok:
                     self.hinzugefügt +=1
                self.menu()

    def score_löschen(self):
        """ löscht das Internet """
        self.score = []
        for null in range(len(self.fremd)):
            self.score.append([0, 0, 0])
        self.menu()
        
    def check_date(self):
        """ prüft Datumswechsel währen der Sitzung """
        global start
        data = self.statistik()
        
        if data[-3] != start[-3]:      # wenn neues Datum
            self.ende(data)
        else:
            return
     
    def ende(self, neu=False):
        """ Programm beenden, Statistik anzeigen und speichern """
        
        new = self.statistik()           
        with open(path_data, "a") as data:
            writer = csv.writer(data)
            writer.writerow(new)
            
        neu_score = []    
        with open(path_csv, "w") as csv_score:
            writer = csv.writer(csv_score)
            for i in range(len(self.fremd)):
                line = [self.fremd[i]]
                line += (de for de in self.deutsch[i])
                line += [self.meta[i]]     # Metalink zum stats Eintrag
                line += (sc for sc in self.score[i])
                neu_score.append(line)                       
            writer.writerows(neu_score)
        if neu:
            print(f"\n\n{col.G}gesichert{col.E}")
            weiter = input()
            return
        else:
            print(f"\n{col.G}Dateien aktualisiert!{col.E}\n\n{col.BR}TSCHÜSS !!{col.E}\n")
            sys.exit(0)

menu = Vokabeln()
start = menu.statistik()
menu.menu()
